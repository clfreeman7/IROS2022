% 
% Script: demo_GaitPredict.m
%  
% Dependencies:
% Dependencies:
%   +demos/data/experiment_2_motion_primitives.mat
%
%   +offlineanalysis/GaitPredict
%   +offlineanalysis/Gait
%
% Description: 
%   Demonstrate how to create Gait objects from experimental motion primitive data.


% [0] == Script setup
clear; clc
% Add dependencies to classpath
addpath('../');
load 'data/experiment_2_motion_primitives.mat'
% Define a gait.
gait_sequence = [3,7,2]; 

% Find the symmetric permutations.
[allPerms, nPerms] = listpermutations(gait_sequence, true, false)

% Configure figure tex interpreters
set(groot, 'defaultAxesTickLabelInterpreter','latex');
set(groot, 'defaultTextInterpreter','latex');

% [1] == Extract and define parameters for GaitPredict() objects.
%%
% Extract data.
 % Define robot.
 gait_exp_2(i).params.robot_name = 'orange';
 gait_exp_2(i).params.substrate = 'black mat';



% [2] == Instantiate GaitTest() objects for each experimental trial.
% This analyzes the data from each trial to find motion primitive twist
% information.

% Set up figure for plotting
figure(1)
tiledlayout(1, 5)

% Instantiate objects for each gait tested. 
for i = 1:n_gaits
    all_gaits(i) = offlineanalysis.GaitTest(gait_exp_2(i).raw_data, ...
                                                 gait_sequences{i}(1,:), ...
                                                 gait_exp_2(i).params);
    nexttile(i);
    all_gaits(i).plot;      
end


% [3] == Instantiate gait objects for each gait tested to build a gait
% library. 

figure(3)
tiledlayout(1, 5)
for i = 1:n_gaits
    gait_library_2(i) = gaitdef.Gait(all_gaits(i), gait_exp_2(i).params);
    nexttile;
    gait_library_2(i).plot(30)
end


gait_library_2
for ii = 1:length(gait_library_2)
  gait_library_2(ii).gait_name = char(65 + ii - 1);
end


